image:
  repo: xetusoss/archiva
  tag: v2
  pullPolicy: Always
#
# SMTP values for archiva
#
smtp:
  host:
  port: 25

#
# HTTP Proxy configuration
#
proxy:
  enabled: false
  hostname:
  proto: https
  pathPrefix:
  customPort:

#
# User database configuration
#
userDb:
  type: derby
  user: archiva
  password:
  host:
  port: 3306
  name: archiva
  image: "mysql:8"

#
# Resource Configuration
#
resourceConf:
  mallocMaxArena: 2
  #
  # This is used for both the memory request and limit
  #
  memory: 512
  cpuLimit: 3
  cpuRequest: 1

#
# Archiva configuration
#
archiva:
  caCertsSecret:
  jvmExtraOpts: []

service:
  type: ClusterIP

# Custom readiness Probes and liveness probes
# Please ensure the string is indented properly otherwise the helmchart will fail
readinessProbe: |
  exec:
    command:
      - /healthcheck.sh
  # httpGet:
  #   path: /restServices/archivaServices/pingService/ping
  #   port: 8080
  #   httpHeaders:
  #     - name: Origin
  #       value: http://localhost:8080/
  initialDelaySeconds: 15
  periodSeconds: 5

livenessProbe: |
  exec:
    command:
      - /healthcheck.sh
  # httpGet:
  #   path: /restServices/archivaServices/pingService/ping
  #   port: 8080
  #   httpHeaders:
  #     - name: Origin
  #       value: http://localhost:8080/
  initialDelaySeconds: 30
  periodSeconds: 10
  failureThreshold: 27

ingress:
  # If `true`, an Ingress is created
  enabled: false
  # The name of the Ingress Class associated with this ingress
  ingressClassName: ""
  # The Service port targeted by the Ingress
  servicePort: http
  # Ingress annotations
  annotations:
    {}
    ## Resolve HTTP 502 error using ingress-nginx:
    ## See https://www.ibm.com/support/pages/502-error-ingress-keycloak-response
    # nginx.ingress.kubernetes.io/proxy-buffer-size: 128k

  # Additional Ingress labels
  labels:
    {}
    # List of rules for the Ingress
  rules:
    - # Ingress host
      host: "{{ .Release.Name }}.example.com"
      # Paths for the host
      paths:
        - path: "/"
          pathType: Prefix
  # TLS configuration
  # tls:
  #   - hosts:
  #       - "{{ .Release.Name }}.example.com"
  #     secretName: ""

persistence:
  enabled: true
  #
  # Use the existingClaim to specify
  # a specific volume to claim
  #
  existingClaim:
  #
  # *OR*
  #
  # Specify the following values to capture a new claim
  # from a storageprovider
  storageClass:
  requestSize: 20Gi
#
# (OPTIONAL) tolerations
#
#tolerations:

#
# (OPTIONAL) nodeSelector
#
#nodeSelector:

#
# (OPTIONAL) priorityClassName
#
#priorityClassName:

serviceAccount:
  enabled: false
  existingServiceAccountName: ""
